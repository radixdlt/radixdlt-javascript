/* tslint:disable */
/* eslint-disable */
/**
 * Radix Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime'
import {
	AccountIdentifier,
	AccountIdentifierFromJSON,
	AccountIdentifierFromJSONTyped,
	AccountIdentifierToJSON,
	Action,
	ActionFromJSON,
	ActionFromJSONTyped,
	ActionToJSON,
} from '.'

/**
 *
 * @export
 * @interface TransactionBuildRequest
 */
export interface TransactionBuildRequest {
	/**
	 *
	 * @type {string}
	 * @memberof TransactionBuildRequest
	 */
	network: string
	/**
	 *
	 * @type {Array<Action>}
	 * @memberof TransactionBuildRequest
	 */
	actions: Array<Action>
	/**
	 *
	 * @type {AccountIdentifier}
	 * @memberof TransactionBuildRequest
	 */
	feePayer: AccountIdentifier
	/**
	 *
	 * @type {string}
	 * @memberof TransactionBuildRequest
	 */
	message?: string
	/**
	 *
	 * @type {boolean}
	 * @memberof TransactionBuildRequest
	 */
	disableTokenMintAndBurn?: boolean
}

export function TransactionBuildRequestFromJSON(
	json: any,
): TransactionBuildRequest {
	return TransactionBuildRequestFromJSONTyped(json, false)
}

export function TransactionBuildRequestFromJSONTyped(
	json: any,
	ignoreDiscriminator: boolean,
): TransactionBuildRequest {
	if (json === undefined || json === null) {
		return json
	}
	return {
		network: json['network'],
		actions: (json['actions'] as Array<any>).map(ActionFromJSON),
		feePayer: AccountIdentifierFromJSON(json['fee_payer']),
		message: !exists(json, 'message') ? undefined : json['message'],
		disableTokenMintAndBurn: !exists(json, 'disable_token_mint_and_burn')
			? undefined
			: json['disable_token_mint_and_burn'],
	}
}

export function TransactionBuildRequestToJSON(
	value?: TransactionBuildRequest | null,
): any {
	if (value === undefined) {
		return undefined
	}
	if (value === null) {
		return null
	}
	return {
		network: value.network,
		actions: (value.actions as Array<any>).map(ActionToJSON),
		fee_payer: AccountIdentifierToJSON(value.feePayer),
		message: value.message,
		disable_token_mint_and_burn: value.disableTokenMintAndBurn,
	}
}
