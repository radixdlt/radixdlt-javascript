/* tslint:disable */
/* eslint-disable */
/**
 * Radix Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     BelowMinimumStakeErrorFromJSONTyped,
     MessageTooLongErrorFromJSONTyped,
     NotEnoughResourcesErrorFromJSONTyped,
     NotValidatorOwnerErrorFromJSONTyped,
     TransactionBuildSuccessFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface TransactionBuildResult
 */
export interface TransactionBuildResult {
    /**
     * 
     * @type {string}
     * @memberof TransactionBuildResult
     */
    type: string;
}

export function TransactionBuildResultFromJSON(json: any): TransactionBuildResult {
    return TransactionBuildResultFromJSONTyped(json, false);
}

export function TransactionBuildResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionBuildResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'BelowMinimumStakeError') {
            return BelowMinimumStakeErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'MessageTooLongError') {
            return MessageTooLongErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'NotEnoughResourcesError') {
            return NotEnoughResourcesErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'NotValidatorOwnerError') {
            return NotValidatorOwnerErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'TransactionBuildSuccess') {
            return TransactionBuildSuccessFromJSONTyped(json, true);
        }
    }
    return {
        
        'type': json['type'],
    };
}

export function TransactionBuildResultToJSON(value?: TransactionBuildResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
    };
}

