/* tslint:disable */
/* eslint-disable */
/**
 * Radix Gateway API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.9.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime'
import {
	AccountBalancesRequest,
	AccountBalancesRequestFromJSON,
	AccountBalancesRequestToJSON,
	AccountBalancesResponse,
	AccountBalancesResponseFromJSON,
	AccountBalancesResponseToJSON,
	AccountStakesRequest,
	AccountStakesRequestFromJSON,
	AccountStakesRequestToJSON,
	AccountStakesResponse,
	AccountStakesResponseFromJSON,
	AccountStakesResponseToJSON,
	AccountTransactionsRequest,
	AccountTransactionsRequestFromJSON,
	AccountTransactionsRequestToJSON,
	AccountTransactionsResponse,
	AccountTransactionsResponseFromJSON,
	AccountTransactionsResponseToJSON,
	AccountUnstakesRequest,
	AccountUnstakesRequestFromJSON,
	AccountUnstakesRequestToJSON,
	AccountUnstakesResponse,
	AccountUnstakesResponseFromJSON,
	AccountUnstakesResponseToJSON,
	NetworkResponse,
	NetworkResponseFromJSON,
	NetworkResponseToJSON,
	TokenDeriveRequest,
	TokenDeriveRequestFromJSON,
	TokenDeriveRequestToJSON,
	TokenDeriveResponse,
	TokenDeriveResponseFromJSON,
	TokenDeriveResponseToJSON,
	TokenNativeRequest,
	TokenNativeRequestFromJSON,
	TokenNativeRequestToJSON,
	TokenNativeResponse,
	TokenNativeResponseFromJSON,
	TokenNativeResponseToJSON,
	TokenRequest,
	TokenRequestFromJSON,
	TokenRequestToJSON,
	TokenResponse,
	TokenResponseFromJSON,
	TokenResponseToJSON,
	TransactionBuildRequest,
	TransactionBuildRequestFromJSON,
	TransactionBuildRequestToJSON,
	TransactionBuildResponse,
	TransactionBuildResponseFromJSON,
	TransactionBuildResponseToJSON,
	TransactionFinalizeRequest,
	TransactionFinalizeRequestFromJSON,
	TransactionFinalizeRequestToJSON,
	TransactionFinalizeResponse,
	TransactionFinalizeResponseFromJSON,
	TransactionFinalizeResponseToJSON,
	TransactionRulesRequest,
	TransactionRulesRequestFromJSON,
	TransactionRulesRequestToJSON,
	TransactionRulesResponse,
	TransactionRulesResponseFromJSON,
	TransactionRulesResponseToJSON,
	TransactionStatusRequest,
	TransactionStatusRequestFromJSON,
	TransactionStatusRequestToJSON,
	TransactionStatusResponse,
	TransactionStatusResponseFromJSON,
	TransactionStatusResponseToJSON,
	TransactionSubmitRequest,
	TransactionSubmitRequestFromJSON,
	TransactionSubmitRequestToJSON,
	TransactionSubmitResponse,
	TransactionSubmitResponseFromJSON,
	TransactionSubmitResponseToJSON,
	UnexpectedError,
	UnexpectedErrorFromJSON,
	UnexpectedErrorToJSON,
	ValidatorInfoRequest,
	ValidatorInfoRequestFromJSON,
	ValidatorInfoRequestToJSON,
	ValidatorInfoResponse,
	ValidatorInfoResponseFromJSON,
	ValidatorInfoResponseToJSON,
	ValidatorsRequest,
	ValidatorsRequestFromJSON,
	ValidatorsRequestToJSON,
	ValidatorsResponse,
	ValidatorsResponseFromJSON,
	ValidatorsResponseToJSON,
} from '../models'

export interface AccountBalancesPostRequest {
	accountBalancesRequest: AccountBalancesRequest
}

export interface AccountStakesPostRequest {
	accountStakesRequest: AccountStakesRequest
}

export interface AccountTransactionsPostRequest {
	accountTransactionsRequest: AccountTransactionsRequest
}

export interface AccountUnstakesPostRequest {
	accountUnstakesRequest: AccountUnstakesRequest
}

export interface NetworkPostRequest {
	body: object
}

export interface TokenDerivePostRequest {
	tokenDeriveRequest: TokenDeriveRequest
}

export interface TokenNativePostRequest {
	tokenNativeRequest: TokenNativeRequest
}

export interface TokenPostRequest {
	tokenRequest: TokenRequest
}

export interface TransactionBuildPostRequest {
	transactionBuildRequest: TransactionBuildRequest
}

export interface TransactionFinalizePostRequest {
	transactionFinalizeRequest: TransactionFinalizeRequest
}

export interface TransactionRulesPostRequest {
	transactionRulesRequest: TransactionRulesRequest
}

export interface TransactionStatusPostRequest {
	transactionStatusRequest: TransactionStatusRequest
}

export interface TransactionSubmitPostRequest {
	transactionSubmitRequest: TransactionSubmitRequest
}

export interface ValidatorPostRequest {
	validatorInfoRequest: ValidatorInfoRequest
}

export interface ValidatorsPostRequest {
	validatorsRequest: ValidatorsRequest
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
	/**
	 * Get Account Balances
	 */
	async accountBalancesPostRaw(
		requestParameters: AccountBalancesPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<AccountBalancesResponse>> {
		if (
			requestParameters.accountBalancesRequest === null ||
			requestParameters.accountBalancesRequest === undefined
		) {
			throw new runtime.RequiredError(
				'accountBalancesRequest',
				'Required parameter requestParameters.accountBalancesRequest was null or undefined when calling accountBalancesPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/account/balances`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: AccountBalancesRequestToJSON(
					requestParameters.accountBalancesRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			AccountBalancesResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Account Balances
	 */
	async accountBalancesPost(
		requestParameters: AccountBalancesPostRequest,
		initOverrides?: RequestInit,
	): Promise<AccountBalancesResponse> {
		const response = await this.accountBalancesPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Stake Positions
	 */
	async accountStakesPostRaw(
		requestParameters: AccountStakesPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<AccountStakesResponse>> {
		if (
			requestParameters.accountStakesRequest === null ||
			requestParameters.accountStakesRequest === undefined
		) {
			throw new runtime.RequiredError(
				'accountStakesRequest',
				'Required parameter requestParameters.accountStakesRequest was null or undefined when calling accountStakesPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/account/stakes`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: AccountStakesRequestToJSON(
					requestParameters.accountStakesRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			AccountStakesResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Stake Positions
	 */
	async accountStakesPost(
		requestParameters: AccountStakesPostRequest,
		initOverrides?: RequestInit,
	): Promise<AccountStakesResponse> {
		const response = await this.accountStakesPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Account Transactions
	 */
	async accountTransactionsPostRaw(
		requestParameters: AccountTransactionsPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<AccountTransactionsResponse>> {
		if (
			requestParameters.accountTransactionsRequest === null ||
			requestParameters.accountTransactionsRequest === undefined
		) {
			throw new runtime.RequiredError(
				'accountTransactionsRequest',
				'Required parameter requestParameters.accountTransactionsRequest was null or undefined when calling accountTransactionsPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/account/transactions`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: AccountTransactionsRequestToJSON(
					requestParameters.accountTransactionsRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			AccountTransactionsResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Account Transactions
	 */
	async accountTransactionsPost(
		requestParameters: AccountTransactionsPostRequest,
		initOverrides?: RequestInit,
	): Promise<AccountTransactionsResponse> {
		const response = await this.accountTransactionsPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Unstake Positions
	 */
	async accountUnstakesPostRaw(
		requestParameters: AccountUnstakesPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<AccountUnstakesResponse>> {
		if (
			requestParameters.accountUnstakesRequest === null ||
			requestParameters.accountUnstakesRequest === undefined
		) {
			throw new runtime.RequiredError(
				'accountUnstakesRequest',
				'Required parameter requestParameters.accountUnstakesRequest was null or undefined when calling accountUnstakesPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/account/unstakes`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: AccountUnstakesRequestToJSON(
					requestParameters.accountUnstakesRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			AccountUnstakesResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Unstake Positions
	 */
	async accountUnstakesPost(
		requestParameters: AccountUnstakesPostRequest,
		initOverrides?: RequestInit,
	): Promise<AccountUnstakesResponse> {
		const response = await this.accountUnstakesPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Network
	 */
	async networkPostRaw(
		requestParameters: NetworkPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<NetworkResponse>> {
		if (
			requestParameters.body === null ||
			requestParameters.body === undefined
		) {
			throw new runtime.RequiredError(
				'body',
				'Required parameter requestParameters.body was null or undefined when calling networkPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/network`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: requestParameters.body as any,
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			NetworkResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Network
	 */
	async networkPost(
		requestParameters: NetworkPostRequest,
		initOverrides?: RequestInit,
	): Promise<NetworkResponse> {
		const response = await this.networkPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Derive Token Identifier
	 */
	async tokenDerivePostRaw(
		requestParameters: TokenDerivePostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TokenDeriveResponse>> {
		if (
			requestParameters.tokenDeriveRequest === null ||
			requestParameters.tokenDeriveRequest === undefined
		) {
			throw new runtime.RequiredError(
				'tokenDeriveRequest',
				'Required parameter requestParameters.tokenDeriveRequest was null or undefined when calling tokenDerivePost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/token/derive`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TokenDeriveRequestToJSON(
					requestParameters.tokenDeriveRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TokenDeriveResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Derive Token Identifier
	 */
	async tokenDerivePost(
		requestParameters: TokenDerivePostRequest,
		initOverrides?: RequestInit,
	): Promise<TokenDeriveResponse> {
		const response = await this.tokenDerivePostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Native Token Info
	 */
	async tokenNativePostRaw(
		requestParameters: TokenNativePostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TokenNativeResponse>> {
		if (
			requestParameters.tokenNativeRequest === null ||
			requestParameters.tokenNativeRequest === undefined
		) {
			throw new runtime.RequiredError(
				'tokenNativeRequest',
				'Required parameter requestParameters.tokenNativeRequest was null or undefined when calling tokenNativePost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/token/native`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TokenNativeRequestToJSON(
					requestParameters.tokenNativeRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TokenNativeResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Native Token Info
	 */
	async tokenNativePost(
		requestParameters: TokenNativePostRequest,
		initOverrides?: RequestInit,
	): Promise<TokenNativeResponse> {
		const response = await this.tokenNativePostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Token Info
	 */
	async tokenPostRaw(
		requestParameters: TokenPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TokenResponse>> {
		if (
			requestParameters.tokenRequest === null ||
			requestParameters.tokenRequest === undefined
		) {
			throw new runtime.RequiredError(
				'tokenRequest',
				'Required parameter requestParameters.tokenRequest was null or undefined when calling tokenPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/token`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TokenRequestToJSON(requestParameters.tokenRequest),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TokenResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Token Info
	 */
	async tokenPost(
		requestParameters: TokenPostRequest,
		initOverrides?: RequestInit,
	): Promise<TokenResponse> {
		const response = await this.tokenPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Build Transaction
	 */
	async transactionBuildPostRaw(
		requestParameters: TransactionBuildPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TransactionBuildResponse>> {
		if (
			requestParameters.transactionBuildRequest === null ||
			requestParameters.transactionBuildRequest === undefined
		) {
			throw new runtime.RequiredError(
				'transactionBuildRequest',
				'Required parameter requestParameters.transactionBuildRequest was null or undefined when calling transactionBuildPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/transaction/build`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TransactionBuildRequestToJSON(
					requestParameters.transactionBuildRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TransactionBuildResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Build Transaction
	 */
	async transactionBuildPost(
		requestParameters: TransactionBuildPostRequest,
		initOverrides?: RequestInit,
	): Promise<TransactionBuildResponse> {
		const response = await this.transactionBuildPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Finalize Transaction
	 */
	async transactionFinalizePostRaw(
		requestParameters: TransactionFinalizePostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TransactionFinalizeResponse>> {
		if (
			requestParameters.transactionFinalizeRequest === null ||
			requestParameters.transactionFinalizeRequest === undefined
		) {
			throw new runtime.RequiredError(
				'transactionFinalizeRequest',
				'Required parameter requestParameters.transactionFinalizeRequest was null or undefined when calling transactionFinalizePost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/transaction/finalize`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TransactionFinalizeRequestToJSON(
					requestParameters.transactionFinalizeRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TransactionFinalizeResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Finalize Transaction
	 */
	async transactionFinalizePost(
		requestParameters: TransactionFinalizePostRequest,
		initOverrides?: RequestInit,
	): Promise<TransactionFinalizeResponse> {
		const response = await this.transactionFinalizePostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Transaction Rules
	 */
	async transactionRulesPostRaw(
		requestParameters: TransactionRulesPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TransactionRulesResponse>> {
		if (
			requestParameters.transactionRulesRequest === null ||
			requestParameters.transactionRulesRequest === undefined
		) {
			throw new runtime.RequiredError(
				'transactionRulesRequest',
				'Required parameter requestParameters.transactionRulesRequest was null or undefined when calling transactionRulesPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/transaction/rules`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TransactionRulesRequestToJSON(
					requestParameters.transactionRulesRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TransactionRulesResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Transaction Rules
	 */
	async transactionRulesPost(
		requestParameters: TransactionRulesPostRequest,
		initOverrides?: RequestInit,
	): Promise<TransactionRulesResponse> {
		const response = await this.transactionRulesPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Transaction
	 */
	async transactionStatusPostRaw(
		requestParameters: TransactionStatusPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TransactionStatusResponse>> {
		if (
			requestParameters.transactionStatusRequest === null ||
			requestParameters.transactionStatusRequest === undefined
		) {
			throw new runtime.RequiredError(
				'transactionStatusRequest',
				'Required parameter requestParameters.transactionStatusRequest was null or undefined when calling transactionStatusPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/transaction/status`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TransactionStatusRequestToJSON(
					requestParameters.transactionStatusRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TransactionStatusResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Transaction
	 */
	async transactionStatusPost(
		requestParameters: TransactionStatusPostRequest,
		initOverrides?: RequestInit,
	): Promise<TransactionStatusResponse> {
		const response = await this.transactionStatusPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Submit Transaction
	 */
	async transactionSubmitPostRaw(
		requestParameters: TransactionSubmitPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<TransactionSubmitResponse>> {
		if (
			requestParameters.transactionSubmitRequest === null ||
			requestParameters.transactionSubmitRequest === undefined
		) {
			throw new runtime.RequiredError(
				'transactionSubmitRequest',
				'Required parameter requestParameters.transactionSubmitRequest was null or undefined when calling transactionSubmitPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/transaction/submit`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: TransactionSubmitRequestToJSON(
					requestParameters.transactionSubmitRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			TransactionSubmitResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Submit Transaction
	 */
	async transactionSubmitPost(
		requestParameters: TransactionSubmitPostRequest,
		initOverrides?: RequestInit,
	): Promise<TransactionSubmitResponse> {
		const response = await this.transactionSubmitPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Validator
	 */
	async validatorPostRaw(
		requestParameters: ValidatorPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<ValidatorInfoResponse>> {
		if (
			requestParameters.validatorInfoRequest === null ||
			requestParameters.validatorInfoRequest === undefined
		) {
			throw new runtime.RequiredError(
				'validatorInfoRequest',
				'Required parameter requestParameters.validatorInfoRequest was null or undefined when calling validatorPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/validator`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: ValidatorInfoRequestToJSON(
					requestParameters.validatorInfoRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			ValidatorInfoResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Validator
	 */
	async validatorPost(
		requestParameters: ValidatorPostRequest,
		initOverrides?: RequestInit,
	): Promise<ValidatorInfoResponse> {
		const response = await this.validatorPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}

	/**
	 * Get Validators
	 */
	async validatorsPostRaw(
		requestParameters: ValidatorsPostRequest,
		initOverrides?: RequestInit,
	): Promise<runtime.ApiResponse<ValidatorsResponse>> {
		if (
			requestParameters.validatorsRequest === null ||
			requestParameters.validatorsRequest === undefined
		) {
			throw new runtime.RequiredError(
				'validatorsRequest',
				'Required parameter requestParameters.validatorsRequest was null or undefined when calling validatorsPost.',
			)
		}

		const queryParameters: any = {}

		const headerParameters: runtime.HTTPHeaders = {}

		headerParameters['Content-Type'] = 'application/json'

		const response = await this.request(
			{
				path: `/validators`,
				method: 'POST',
				headers: headerParameters,
				query: queryParameters,
				body: ValidatorsRequestToJSON(
					requestParameters.validatorsRequest,
				),
			},
			initOverrides,
		)

		return new runtime.JSONApiResponse(response, jsonValue =>
			ValidatorsResponseFromJSON(jsonValue),
		)
	}

	/**
	 * Get Validators
	 */
	async validatorsPost(
		requestParameters: ValidatorsPostRequest,
		initOverrides?: RequestInit,
	): Promise<ValidatorsResponse> {
		const response = await this.validatorsPostRaw(
			requestParameters,
			initOverrides,
		)
		return await response.value()
	}
}
